## Strings in Python

    - A string is a sequence of characters contained within a pair of 'single quotes' or "double quotes"
    - A string can be any length and can contain any letters, numbers, symbols, and spaces
    - A character from a string can be selected using string_name[index]
    - len() can be used to determine the number of characters in a string
    - Strings can be iterated through using for loops
  
* Strings can be thought of as lists

    - You can index a single letter from any string

    my_name = "Joey Jo Jo"
    first_initial = my_name[0]
    print(first_initial)
    
* Slicing Strings

   - If we remove the first index, the slice starts at the beginning of the string  
      
      string_variable[:4]
      
   - If we remove the second index the slice continues to the end of the string
       
       string_variable[4:]
       
* Concatenating Strings

   def account_generator(first_name, last_name):
      new_account = first_name[0:3] + last_name[0:3]
      return new_account

      new_account = account_generator(first_name, last_name)
      print(new_account)
      
* Using len() to slice

      Using a len() statement as the starting index 
        and omitting the final index lets you slice n characters from the end of a string, where n is the amount you subtract from len()
        
       length = len(favorite_fruit)
       last_chars = favorite_fruit[length-4:]
       print(last_chars)
       
* Negative Indices

      favorite_fruit[-3:] - slices the last three characters of 'blueberry'
     
* Strings are Immutable

    - They cannot be changed once they are created
    - They can be used to create other things 
    
* Escape Characters

    - By adding a backslash in front of the special character we want to escape, \", we can include it in a string
    
* Iterating Through Strings

    - Can iterate through strings using 'for' and 'while' loops
    
      def print_each_letter(word):
        for letter in word:
          print(letter)
    
* Strings and Conditionals

     - Can iterate through strings and do something to each character
     - Can use 'in' checks to iterate more efficiently 

        def letter_check(word, letter):
          for character in word:
            if character == letter:
              return True
          return False
    
        def common_letters(string_one, string_two):
          common = []
          for letter in string_one:
            if (letter in string_two) and not (letter in common):
              common.append(letter)
          return common

## String Methods - Changing Case
    
 * Three methods to change the casing of strings (they create new strings and do not change original strings: 
        .lower() returns the string with all lowercase characters
        .upper() returns the string with all uppercase characters
        .title() returns the string in title case, which means the first letter of each word is capitalized
    
    string_variable_name.lower()

## String Methods - Splitting Strings

 * .split() is performed on a string, takes one argument, 
                and returns a list of substrings found between the given argument (which in the case of .split() is known as the delimiter)
                .split returns a list with each word in the string. Important to note: if we run .split() on a string with no spaces, 
                  we will get the same string in return
                  
     - If we give split() an argument it will split the strings at that character, e.g., string_variable.split('a') will split the strings at the 
            letter 'a'. When you split a string on a character that it also ends with, youâ€™ll end up with an empty string at the end of the list
            
     - You can use any string as the argument for .split(), making it a versatile and powerful tool
     
        authors = "Audre Lorde,Gabriela Mistral,Jean Toomer,An Qi,Walt Whitman,Shel Silverstein,Carmen Boullosa,Kamala Suraiyya,Langston Hughes,Adrienne Rich,Nikki Giovanni"
        author_names = authors.split(',')
        print(author_names)

        author_last_names = []
        for name in author_names:
          author_last_names.append(name.split()[-1])

        print(author_last_names)
     
   * Split strings using escape sequences - used to indicate that we want to pslit something in a string that is not a character
     
         '/n' - newline
         '/t' - horizontal tab
     
## String Methods - Joining Strings
 
      - .join() is the opposite of .split() - .join() joins a list of strings together with a given delimiter 
      
        'delimiter'.join(list_you_want_to_join)
        
        reapers_line_one_words = ["Black", "reapers", "with", "the", "sound", "of", "steel", "on", "stones"]
        reapers_line_one = ' '.join(reapers_line_one_words)
        print(reapers_line_one)
 
     - .join() can also use escape sequences to join strings
        
         '/n' - newline
         '/t' - horizontal tab
         
        winter_trees_lines = ['All the complicated details', 'of the attiring and', 'the disattiring are completed!', 'A liquid moon', 'moves gently among', 'the long branches.', 'Thus having prepared their buds', 'against a sure winter', 'the wise trees', 'stand sleeping in the cold.']
        winter_trees_full = '\n'.join(winter_trees_lines)
        print(winter_trees_full)
        
## String Methods - Cleaning Strings
  
    * .strip() - strips a string so it removes all the whitespace characters form the beingging to end
   
        - can also use .strip() with a character argument, which will strip that character from either end of the string
        
        love_maybe_lines = ['Always    ', '     in the middle of our bloodiest battles  ', 'you lay down your arms', '           like flowering mines    ','\n' ,'   to conquer me home.    ']
        love_maybe_lines_stripped = []
        for line in love_maybe_lines:
          love_maybe_lines_stripped.append(line.strip())
        print(love_maybe_lines_stripped)
        
        love_maybe_full = '\n'.join(love_maybe_lines_stripped)
        print(love_maybe_full)
    
    * .replace() - takes two arguments and replaces all instances of the first argument in a string with the second argument
    
        string_name.replace(substring_being_replaced, new_substring)
        
        toomer_bio_fixed = toomer_bio.replace('Tomer', 'Toomer')
        
## String Methods - Finding Strings
 
     .find() - takes a string as an argument and searching the string it was run on for that string
                It then returns the first index value where that string is located
                
         god_wills_it_line_one = "The very earth will disown you"
         disown_placement = god_wills_it_line_one.find('disown') - finds the index of the word
         print(disown_placement)
         
 ## Strings Method - Format
 
      .format() - takes variables as an argument and includes them in the string that it is run on
                    You include {} marks as placeholders for where those variables will be imported
                    
           def favorite_song_statement(song, artist):
            return "My favorite song is {} by {}.".format(song, artist)
            
       - Note: .format() can take as many arguments as there are {} in the string it is run on, which in this case is two
       
            def poem_title_card(title, poet):
              poem_desc = "The poem \"{}\" is written by {}.".format(title, poet)
              return poem_desc
 
       - Can add keywords to the .format() - This makes writing AND reading the code much easier
       
            def favorite_song_statement(song, artist):
                return "My favorite song is {song} by {artist}.".format(song=song, artist=artist)
 
            def favorite_song_statement(song, artist):
                # this will have the same output as the above example
                return "My favorite song is {song} by {artist}.".format(artist=artist, song=song)
 
 ## Example Code 1
 
highlighted_poems = "Afterimages:Audre Lorde:1997,  The Shadow:William Carlos Williams:1915, Ecstasy:Gabriela Mistral:1925,   Georgia Dusk:Jean Toomer:1923,   Parting Before Daybreak:An Qi:2014, The Untold Want:Walt Whitman:1871, Mr. Grumpledump's Song:Shel Silverstein:2004, Angel Sound Mexico City:Carmen Boullosa:2013, In Love:Kamala Suraiyya:1965, Dream Variations:Langston Hughes:1994, Dreamwood:Adrienne Rich:1987"
print(highlighted_poems)

highlighted_poems_list = highlighted_poems.split(',')
print(highlighted_poems_list)

highlighted_poems_stripped = []
for poem in highlighted_poems_list:
  highlighted_poems_stripped.append(poem.strip())
print(highlighted_poems_stripped)

highlighted_poems_details= []
for poem in highlighted_poems_stripped:
  highlighted_poems_details.append(poem.split(':'))

titles = []
poets = []
dates = []

for poem in highlighted_poems_details: 
  titles.append(poem[0])
  poets.append(poem[1])
  dates.append(poem[2])

for poem in highlighted_poems_details:
  return "The poem {} was published by {} in {}.".format(title=title, poet=poet, date=date)


## Example Code 2 

 letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

    # Write your unique_english_letters function here:
    def unique_english_letters(word):
      unique = 0
      for letter in letters:
        if letter in word: 
          unique +=1
      return unique
 

## Example Code 3 

    def count_char_x(word,x):
      common = 0
      for letter in word:
        if letter == x:
          common += 1
      return common
 
 ## Example Code 4
 
     def count_multi_char_x(word, x):
      counts = word.split(x)
      return(len(counts)-1)
 
 
 ## Example Code 5
 
     def substring_between_letters(word, start, end):
      if word.find(start) == -1:
        return word
      if word.find(end) == -1:
        return word
      else:
        return word[-3:-1]
 
 ## Example Code 6

     def x_length_words(sentence, x):
      words = sentence.split(" ")
      for word in words:
        if len(word) < x:
          return False
      return True

 ## Example Code 7
 
    def check_for_name(sentence, name):
      if name.lower() in sentence.lower():
        return True
      return False

## Example Code 8 

    def every_other_letter(word):
      every_second = ""
      for i in range(0, len(word), 2):
        every_second += word[i]
      return every_second

 ## Example Code 9 
 
     def reverse_string(word):
      reverse = ""
      for i in range(len(word)-1, -1, -1):
        reverse += word[i]
      return reverse 
 
 ## Example Code 10
 
    def make_spoonerism(word1, word2):
      spoon1 = word2[0] + word1[1:]
      spoon2 = word1[0] + word2[1:]
      spoon = spoon1 + " " + spoon2
      return spoon

 
## Example Code 11

    def add_exclamation(word):
      while(len(word) < 20):
        word += "!"
      return word

 
 
 
 
