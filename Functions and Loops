Python 101

## Basic Commands

  print() - displays
  return() - returns output (useful in functions)
  type() - what kind of variable 
  range() - lists the range of values list(range(10)) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
  len() - returns the length (the number of items) of an object. 
          The argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set)
  list() - mutable sequence type
  
## Functions

 Built-in Functions vs User Defined Functions. There are two distinct categories for functions in the world of Python. 
    
 1. Built-in functions - functions that come built into Python for us to use. In Python, your script will execute from the top down, until there 
                          is nothing left to run.
    
      Built-in Functions: https://docs.python.org/3/library/functions.html 

   
  2. Defined Functions - functions that are written by users (like us!).
  
      It is your job to include gateways, known as conditional statements, to tell the computer when it should execute 
      certain blocks of code. If these conditions are met, then run this function.
  
        def function1(input1, input2):
          variable = input1 + input2
          return variable
          print("your variable is " + str(variable))

  Types of Arguments - there are 3 different types of arguments we can give a function: 
      
      1. Positional arguments: arguments that can be called by their position in the function definition.
      
          def calculate_taxi_price(miles_to_travel, rate, discount):
            print(miles_to_travel * rate - discount )

      2. Keyword arguments: arguments that can be called by their name.
      
          calculate_taxi_price(rate=0.5, discount=10, miles_to_travel=100)

      3. Default arguments: arguments that are given default values.
            
           def calculate_taxi_price(miles_to_travel, rate, discount = 10):
             print(miles_to_travel * rate - discount )


## Boolean Variables & if Statements

 * True and False are the only bool types, and any variable that is assigned one of these values is called a boolean variable.
    set_to_true = True
    set_to_false = False
    
    bool_one = 5 != 7 
    
 * Relational Operators
    
    == equals
    != not equals
    > greater than
    >= greater than or equal to
    < less than
    <= less than or equal to
    
      Understanding boolean variables and expressions is essential because they are the building blocks of conditional statements. 

      if variable1 == 5:
        print("True") 
    
  * Boolean Operators

    and - combines two boolean expressions and evaluates as True if both its components are True, but False otherwise.
       
       if variable1 == 5 and variable2 >=4:
        print("True") 
      
    or - combines two expressions into a larger expression that is True if either component is True.
    
        if variable1 == 5 or variable2 >=4:
         print("True") 
    
    not - when applied to any boolean expression it reverses the boolean value. Add 'not' statement at the beginning 
          So if we have a True statement and apply a not operator we get a False statement.
          
        if not variable1 ==5:
         print("True")
        if not (variable1 ==5) and not (variable2 >=2):
         print("False")
       
  * else - these statements allow us to elegantly describe what we want our code to do when certain conditions are not met.
            'else' statements always appear in conjunction with if statements.
            
        def same_name(your_name, my_name):
          if (your_name == my_name):
            return True
          else:
            return False
            
  * elif - 'else if' checks another condition after the previous if statements conditions aren’t met.
              Use to control the order we want our program to check each of our conditional statements.
              
         if donation >= 1000:
           print("You've achieved platinum status")
         elif donation >= 500:
           print("You've achieved gold donor status")
         else:
           print("You've achieved silver donor status")

      'if' statements can be used to create control flow in your code.
      'else' statements can be used to execute code when the conditions of an if statement are not met.
      'elif' statements can be used to build additional checks into your if statements

## For Statements

      for - Python’s 'for' statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence.
         
         words = ['cat', 'window', 'defenestrate']
          for w in words:
              print(w, len(w))
         
         Code that modifies a collection while iterating over that same collection can be tricky to get right. 
         Instead, it is usually more straight-forward to loop over a copy of the collection or to create a new collection:
         
         # Strategy:  Iterate over a copy
            for user, status in users.copy().items():
                if status == 'inactive':
                    del users[user]

          # Strategy:  Create a new collection
            active_users = {}
            for user, status in users.items():
                if status == 'active':
                    active_users[user] = status
      
      range - If you do need to iterate over a sequence of numbers, the built-in function range() comes in handy. 
              It generates arithmetic progressions:
          
          for i in range(5):
            print(i)


## Loops

    Programming languages like Python implement two types of iteration:
      1. Indefinite iteration, where the number of times the loop is executed depends on how many times a condition is met.
      2. Definite iteration, where the number of times the loop will be executed is defined in advance (usually based on the collection size).


* 'for' loop 

    With for loops, on each iteration, we will be able to perform an action on each element of the collection.
    
        for <temporary variable> in <collection>:
          <action>
      
        1. A for keyword indicates the start of a for loop.
        2. A <temporary variable> that is used to represent the value of the element in the collection the loop is currently on.
        3. An in keyword separates the temporary variable from the collection used for iteration.
        4. A <collection> to loop over. In our examples, we will be using a list.
        5. An <action> to do anything on each iteration of the loop.

    Note: One-line for loops are useful for simple programs. It is not recommended you write one-line loops for any loop that has to perform multiple 
    complex actions on each iteration. Doing so will hurt the readability of your code and may ultimately lead to buggier code.
    
        for sports in sport_games: print(sports)
        
    To create arbitrary collections of any length, we can pair our for loops with the trusty
    
         for <temporary variable> in <list of length n>:
          <action>
          
         for temp in range(6): print("Hello")
         
* 'while' loop

    A while loop performs a set of instructions as long as a given condition is true.
    
      while <conditional statement>:
        <action>
    
      count = 0
      while count <= 3:
        # Loop Body
        print(count)
        count += 1

        1. count is initially defined with the value of 0. The conditional statement in the while loop is count <= 3, 
            which is true at the initial iteration of the loop, so the loop body executes.
        2. Inside the loop body, count is printed and then incremented by 1.
        3. When the first iteration of the loop has finished, Python returns to the top of the loop and checks the conditional again. 
            After the first iteration, count would be equal to 1 so the conditional still evaluates to True and so the loop continues.
        4. This continues until the count variable becomes 4. At that point, when the conditional is tested it will no longer be True 
            and the loop will stop.

      count = 0
      while count <= 3: print(count); count += 1
          Note: Here we separate each statement with a ; to denote a separate line of code.

* 'while' loops with lists

    We know that a list has a predetermined length. 
    If we use the length of the list as the basis for how long our while loop needs to run, we can iterate the exact length of the list. 
  
      length = len(ingredients) - how many times we need the loop to iterate
      index = 0 - used to compare against our length variable

      while index < length:   - we are comparing the index to length variable, if True, it will start the loop
        print(ingredients[index])
        index += 1  - incremental increase to make sure the loop stops when the index is no longer smaller than the length
  
    length = len(python_topics)
    index = 0

    while index < length:
      print("I am learning about " + python_topics[index])
      index += 1
  
* Infinite Loops - BAD
    
    A loop that never terminates is called an infinite loop. 
    These are very dangerous for our code because they will make our program run forever and thus consume all of your computer’s resources. 
  
  
  
  
  
  

