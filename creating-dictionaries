## Python Dictionaries

  - A dictionary is an unordered set of key: value pairs
  - A dictionary begins and ends with curly braces { and }
  - Each item consists of a key (strings or numbers) and a value (strings or numbers)
  - Each key: value pair is separated by a comma
  - We can have a list or a dictionary as a value of an item in a dictionary, but we cannot use these data types as keys of the dictionary
  - Dictionaries in Python rely on each key having a hash value, a specific identifier for the key
  - If the key can change, that hash value would not be reliable - the keys must always be unchangeable, hashable data types, like numbers or strings
 
* Create an Empty Dictionary
 
  empty empty_dict = {} 
  
* Add a Key

  dictionary[key] = value
  
* Add Multiple Keys

  - to add multiple key : value pairs to a dictionary at once - use the .update() method
  
  dictionary.update({key: value, key: value})
  
* Overwrite Values

  - The value assignment used when adding a key can also be used to overwrite a key
  
  dictionary[key] = value
  
* Dictionary Comprehensions

  - Use .zip() to combine lists to make a dictionary
  
  dictionary = {key:value for key, value in zip(list1, list2)}

    Remember that zip() combines two lists into an iterator of tuples with the list elements paired together:
      1. Takes a pair from the iterator of tuples
      2. Names the elements in the pair key (the one originally from the names list) and value (the one originally from the heights list)
      3. Creates a key : value item in the students dictionary
      4. Repeats steps 1-3 for the entire iterator of pairs


## Finding a Dictionary Key

  zodiac_elements = {"water": ["Cancer", "Scorpio", "Pisces"], "fire": ["Aries", "Leo", "Sagittarius"], 
  "earth": ["Taurus", "Virgo", "Capricorn"], "air":["Gemini", "Libra", "Aquarius"]}
  
  print(zodiac_elements)
  print(zodiac_elements["fire"])
  
* Check if Key Exists

  key_to_check = "Landmark 81"
  if key_to_check in building_heights:
  print(building_heights["Landmark 81"])
  
* Try/Except to Get a Key

  key_to_check = "Landmark 81"
  try:
    print(building_heights[key_to_check])
  except KeyError:
    print("That key doesn't exist!")
    
* Safely Get a Key

  Use .get() - can also specify a value to return if the key doesn't exist
  
  dictionary_name.get("key")
  dictionary_name.get("key". 'No value')
  dictionary_name.get("key", 0)
  
* Delete a Key

  Use .pop() to remove a key and provide a default value to return if the key doesn't exist
  
  .pop() will delete items from a dictionary when we know the value
  
  available_items = {"health potion": 10, "cake of the cure": 5, "green elixir": 20, "strength sandwich": 25, "stamina grains": 15, "power stew": 30}
  health_points = 20
  health_points += available_items.pop("stamina grains", 0)
  health_points += available_items.pop("power stew", 0)
  health_points += available_items.pop("mystic bread", 0)
  print(available_items)
  
* Get all Keys

  - Dictionaries also have a .keys() method that returns a dict_keys object
  - A dict_keys object is a view object, which provides a look at the current state of the dictionary, without the user being able to modify anything 
  - The dict_keys object returned by .keys() is a set of the keys in the dictionary
  - You cannot add or remove elements from a dict_keys object
  
  .keys()
  
  for student in test_scores.keys():
  print(student)
  
  variable = dictionary_name.keys()
  
* Get all Values
  
 - Dictionaries have a .values() method that returns a dict_values object (just like a dict_keys object but for values
 
 .values() 
 
 for score_list in test_scores.values():
  print(score_list)
  
 list(test_scores.values())
 
 for exercises in num_exercises.values():
    total_exercises += exercises
    print(total_exercises)
    
* Get all Items

  - You can get both the keys and the values with the .items() method
  - Like .keys() and .values(), it returns a dict_list object
  - Each element of the dict_list returned by .items() is a tuple - (key, value)
  
  for company, value in biggest_brands.items():
    print(company + " has a value of " + str(value) + " billion dollars. ")

  
  
  
  
  
  
  

  
  
  
  
