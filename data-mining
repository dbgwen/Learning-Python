## Data acquisition (also called data mining) is the process of gathering data
## Ideally, we have a question in mind before we collect the data, but not always
## Sometimes data is gathered before we know what to do with it
## When that happens, it is important to take a step back and define what questions can be answered with the available data

In addition, some things to consider when acquiring data are:

    1. What data is needed to achieve the goal?
    2. How much data is needed?
    3. Where and how can this data be found?
    4. What legal and privacy concerns should be considered?
    
Primary Data

   - Experiments (e.g., wet lab experiments like gene sequencing)
   - Observations (e.g., surveys, sensors, in situ collection)
   - Simulations (e.g., theoretical models like climate models)
   - Scraping or compiling (e.g., webscraping, text mining)

Secondary Data

   - Any primary data that was collected by someone else
   - Institutionalized data banks (e.g., census, gene sequences)
   
   Secondary data can be obtained from many different websites. Some of the most popular repositories include:

    GitHub
    Kaggle
    KDnuggets
    UCI Machine Learning Repository
    US Government’s Open Data
    Five Thirty Eight
    Amazon Web Services
        BuzzFeed
        Data is Plural
        Harvard HCI
        
    Application Programming Interface (API)
    APIs are built around the HTTP request/response cycle. A client (you) sends a request for data to a website’s server through an API call 
    Then, the server searches its database and responds either with the data, or an error stating that the request cannot be fulfilled

Data File Formats

   - Tabular (e.g., .csv, .tsv, .xlsx)
   - Non-tabular (e.g., .txt, .rtf, .xml)
   - Image (e.g., .png, .jpg, .tif)
   - Agnostic (e.g., .dat)

  Note: Proprietary formats include Excel or MS Access files that are designed to be opened by Microsoft Office applications, 
        as opposed to more generic types like .csv files
        
API Example 

    The Census Data API provides a fast and simple way to access its data. To query the ACS 5-year data, a request should be made to:
    https://api.census.gov/data/2020/acs/acs5 specifying the variables to fetch and the geographic level you want. 

    For example, an API call requesting the total population count of commuters (B08303_001E) at the state level would look like this: 
    https://api.census.gov/data/2020/acs/acs5?get=NAME,B08303_001E&for=state:*

    The part of the URL after ? contains the query parameters, each parameter is separated by &.

    The get parameter specifies a comma-separated list of variables we want to fetch
        B08303_001E is the number of commuters
        NAME is the name of the geographic level
        
    The for parameter specifies the geographic level
        we are requesting state-level data
        and we want all states, as indicated by the *
        
     https://api.census.gov/data/2020/acs/acs5?get=NAME,B08303_001E,B08303_013E&for=county:*&in=state:36 ## returns results for county and state
     
## In Python

    import requests

    r = requests.get('https://api.census.gov/data/2020/acs/acs5?get=NAME,B08303_001E,B08303_013E&for=county:*&in=state:36') 

    r_text = r.text
    print(r_text)
    
    r_json = r.json()
    print(r.json())

    ## While JSON is a great universal format for data interchange, it might not be the ideal format in other aspects, such as readability. 
    ## Instead, having the data in a tabular format (like a CSV) can make it much more human-readable and accessible. 
    
    import csv
    use the writerows() method from the csv library
    
    with open('census.csv', mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerows(r.json())
    
    1. First make a variable and call it file. 
    2. Then we use open() to open a file, since we are going to write that file, we open it with mode='w' for writing mode. 
    3. The newline='' ensures that newlines are always interpreted correctly.
    4. Next, we use the writer() function from the csv library to make a writer object (don’t worry about what this is right now). 
    5. We then use the writerows() method to write each row of data into comma-separated format.
    
    
    
