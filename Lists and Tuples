## Lists 

## List Basics

    In Python, for any specific data-type ( strings, booleans, lists, etc. ) there is built-in functionality 
    that we can use to create, manipulate, and even delete our data. We call this built-in functionality a method. 
    For lists, methods will follow the form of list_name.method()

          example_list.append() - adds item or list to list
            heights.append(["Vik", 68])
          example_list.remove() - removes item from list
          example_list[index number] = "New Item" - replaces that index on the list with the New Item

    Two-Dimensional (2D) Lists
    
      Items in a list can be numbers or strings. Lists can contain other lists! 
      We will commonly refer to these as two-dimensional (2D) lists.
      
          heights = [["Noelle", 61], ["Ava", 70], ["Sam", 67], ["Mia", 64]]
          
      2D lists can be accessed similar to their one-dimensional counterpart. 
      Instead of providing a single pair of brackets [ ] we will use an additional set for each dimension past the first. 
          
          noelles_height = heights[0][1] - creates new variable with the selected index
          class_name_hobbies[0][1] = "Meditation" - replaces that index with Mediation
          customer_data[1].remove(False) - removes an item from a list within a list
   
   * Zip Function
       
       The zip() function takes two (or more) lists as inputs and returns an object that contains a list of pairs. 
       Each pair contains one element from each of the inputs. 
       
       This zip object contains the location of this variable in our computer’s memory. 
       It is fairly simple to convert this object into a useable list by using the built-in function list():
  
                list_variable = zip(list1, list2)
                converted_list = list(list_variable)
                print(converted_list)
          
        Notice two things: (1) Our data set has been converted from a zip memory object to an actual list (denoted by [ ])
        (2) The inner lists don’t use square brackets [ ] around the values. This is because they have been converted into tuples (an immutable type of list).


* .insert() allows us to add an element to a specific index in a list
    
    The .insert() method takes in two inputs:
      1. The index you want to insert into.
      2. The element you want to insert at the specified index.
      
      store_line.insert(2, "Vikor")
      print(store_line) 
      
      All elements from the specified index and up to the last index are shifted one index to the right. 
      This does not apply to inserting an element to the very end of a list as it will simply add an additional index.
      
* .pop() allows us to remove elements at a specific index 
      
      The .pop() method takes an optional single input:
        1. The index for the element you want to remove.
        
      The method can be called without a specific index. 
      Using .pop() without an index will remove whatever the last element of the list is.
      
      .pop() is unique in that it will return the value that was removed. 
      If we wanted to know what element was deleted, simply assign a variable to the call of the .pop() method. 
      
* range() - creates an object of a list of consecutive numbers, starting at 0 and ending at the number before the input

      Convert range() to a list using list(range())
      range() has three potential inputs: range(starting number, ending number, skip number)
      range(2, 12, 3) - outputs a list starting at 2, repeating every three numbers and ending on 11
       
* len() - finds the number of items in a list ("length")
      
      len() 
      print(len())
      
* Slicing - extracts a portion of a list to make a new list

      list_name[start:end]
        - start is the index of the first element that we want to include in our selection
        - end is the index of one more than the last index that we want to include
        
       suitcase = ["shirt", "shirt", "pants", "pants", "pajamas", "books"]
       beginning = suitcase[0:2] - extracts first two elements
       
       list_name[:n] - extracts the first n elements of a list
          fruits[:3] - extracts the list from 0 and up to index 3 (not including 3)
          
        list_name[-n:] - extracts the last n elements
          fruits[-2:] - extracts the last two items on a list
        
        list_name[:-n] - extracts all but n last elements of a list
          fruits[:-1] - extracts from 0 up to last element on list
          
 * .count() - count occurrences of an item in a list
        
        since .count() returns a value, we can assign it to a variable to use it
        Can use .count() to count element appearances in a two-dimensional list [num1, num2]
        
 * .sort() - sorts a list, modifies it directly
 
        .sort() - sorts list of names in alphabetical order
        .sort(reverse=True) - sorts in reverse
        
        The .sort() method does not return any value and thus does not need to be assigned to a variable since it modifies the list directly. 
        If we do assign the result of the method, it would assign the value of None to the variable.
        
 * sorted() - built-in function that creates new list
 
        sorted() differs from .sort() in two ways:
          1. It comes before a list in stead of after
          2. It generates a new list rather than modifying the one that already exists

 
        
 ## List Examples
  
        A function that returns the sum of the first and last elements of a given list might look like this:
              def first_plus_last(lst):
              return lst[0] + lst[-1]

        We can get the length and append it at the same time by nesting the function calls as shown in the solution. 
        Afterward, we return the modified list.
                def append_size(lst):
                lst.append(len(lst))
                return lst
  
        Write a function named larger_list that has two parameters named lst1 and lst2. 
        The function should return the last element of the list that contains more elements. 
        If both lists are the same size, then return the last element of lst1.
        
                def larger_list(lst1, lst2):
                  if len(lst1) >= len(lst2): (use >= to compare lengths of lists)
                    return lst1[-1] 
                  else:
                    return lst2[-1]
                    
        The function should combine these two lists into one new list and sort the result. Return the new sorted list.
        
                def combine_sort(lst1, lst2):
                  unsorted = lst1 + lst2
                  combine = sorted(unsorted)
                  return combine
                  
         Create a function named remove_middle which has three parameters named lst, start, and end.
         The function should return a list where all elements in lst with an index between start and end (inclusive) have been removed
         
                def remove_middle(lst, start, end):
                    return lst[:start] + lst[end+1:]

          Create a function named more_frequent_item that has three parameters named lst, item1, and item2.
          Return either item1 or item2 depending on which item appears more often in lst.
          If the two items appear the same number of times, return item1.
          
                def more_frequent_item(lst, item1, item2):
                  if lst.count(item1) >= lst.count(item2):
                    return item1 
                  else: 
                    return item2
                    
          Create a function named double_index that has two parameters: a list named lst and a single number named index.
          The function should return a new list where all elements are the same as in lst except for the element at index. 
          The element at index should be double the value of the element at index of the original lst.
          If index is not a valid index, the function should return the original list.
          
                def double_index(lst, index):
                  if index >= len(lst):
                    return lst
                  else:
                    new_lst = lst[0:index]
                  new_lst.append(lst[index]*2)
                  new_lst = new_lst + lst[index+1:]
                  return new_lst
                    
           Create a function called middle_element that has one parameter named lst.
           If there are an odd number of elements in lst, the function should return the middle element. 
           If there are an even number of elements, the function should return the average of the middle two elements.   
           
                 def middle_element(lst): 
                      if len(lst) % 2 == 0:
                        sum = lst[int(len(lst)/2)] + lst[int(len(lst)/2) - 1]
                        return sum / 2
                      else: 
                        return lst[int(len(lst)/2)]
                        
                        
## Tuples 
 
    Data structure in Python that lets us store multiple data types inside one object - it is immutable - can't be changed
    Interact with tuples like a list, except once it is created we change or modify it - the order of the tuple is very important
    Sometimes it is useful to have an immutable list
    
    - Unpack a tuple by creating variables from the tuple
    - Creating a one element tuple - have to use a comma after the first element ("trailing comma")
    
    
## List Comprehensions

   new list = [<operation> for item in <list>]
   
   1. operation performed on each item in list
   2. list that we are adjusting
   
   - Use list comprehension to iterate through a nested list. For example, if we have a list of (x,y) coordinate pairs and we want to perform 
    a calculation on all of them based on a particular formula, we can use list comprehension to achieve our goal. 
   - Powerful tool to modify lists with one line of code
   
  Operations available:
   
   - Double: multiply (*) each number by 2
        double_nums = [2 * item for item in nums]
        
   - Squared: exponential (**) each number
        squares = [item**2 for item in nums]
        
   - Add Ten: (+ 10) is  to each number
        add_ten = [item + 10 for item in nums]
        
   - Divide by Two: divide each number in list (/2)
        divide_by_two = [item/2 for item in nums]
        
   - Parity: use (%) modulo to return remainder after division
        parity = [item%2 for item in nums]
        
   - Concatenate strings: use "strings" (+) item for each item in list
        greetings = ["Hello, " + item for item in names]
        
   - First Character: get character of a string using [index] for each item in list
        first_character = [item[0] for item in names]
        
   - Size: find the number of characters in a string using len()
        lengths = [len(item) for item in names]
        
   - Opposite: use the 'not' operator to flip the value of a Boolean
        opposite = [not item for item in booleans]
        
   - Same String: use string comparison using ==
        is_Jerry = [item=="Jerry" for item in names]
        
   - Greater Than Two: use operators to make comparisons
        greater_than_two = [item > 2 for item in nums]
   
        <: less than
        <=: less than or equal to
        >: greater than
        >=: greater than or equal to
        ==: equal to
        !=: not equal to

    - Product: access multiple items in sub-lists by using the following syntax 
            new_list = [item1 * item2 for (item1, item2) in original_list]
            
    - Greater Than: provides 'True' if the first number in the sub-list is greater than the second number in the sub-list
            greater_than = [item1 > item2 for (item1, item2) in original_list]
    
    - First Only: contains only the first element in each sub-list of nested_lists
            first_only = [item1 for (item1, item2) in original_list]
            
    - Add w/ Zip: add two lists using zip and list comprehension
            combined = zip(a,b)
            sums = [item1 + item2 for (item1, item2) in combined]
    
    - Divide w/ Zip: divide two lists using zip and list comprehension
            combined = zip(a,b)
            quotients = [item2/item1 for (item1, item2) in combined]
            
    - Using strings and zip
    
            capitals = ["Santiago", "Paris", "Copenhagen"]
            countries = ["Chile", "France", "Denmark"]
            locations = [capital + ", " + country for (capital, country) in zip(capitals, countries)]
    
    - Using strings an integers
    
            names = ["Shilah", "Arya", "Kele"]
            ages = [14, 9, 35]
            users = ["Name: " + name + ", Age: " + str(age) for (name, age) in zip(names, ages)]
            
    - Greater Than w/ Zip
    
            
            
            
            
    
    
